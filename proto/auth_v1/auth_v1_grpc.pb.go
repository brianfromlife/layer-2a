// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/auth_v1/auth_v1.proto

package auth_v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Auth_V1Client is the client API for Auth_V1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Auth_V1Client interface {
	CreateUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*User, error)
	GetUser(ctx context.Context, in *UserLookup, opts ...grpc.CallOption) (*User, error)
	GetAllUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Users, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *UserLookup, opts ...grpc.CallOption) (*empty.Empty, error)
}

type auth_V1Client struct {
	cc grpc.ClientConnInterface
}

func NewAuth_V1Client(cc grpc.ClientConnInterface) Auth_V1Client {
	return &auth_V1Client{cc}
}

func (c *auth_V1Client) CreateUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/auth_v1.Auth_V1/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auth_V1Client) GetUser(ctx context.Context, in *UserLookup, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/auth_v1.Auth_V1/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auth_V1Client) GetAllUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/auth_v1.Auth_V1/GetAllUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auth_V1Client) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/auth_v1.Auth_V1/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auth_V1Client) DeleteUser(ctx context.Context, in *UserLookup, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/auth_v1.Auth_V1/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Auth_V1Server is the server API for Auth_V1 service.
// All implementations must embed UnimplementedAuth_V1Server
// for forward compatibility
type Auth_V1Server interface {
	CreateUser(context.Context, *NewUser) (*User, error)
	GetUser(context.Context, *UserLookup) (*User, error)
	GetAllUsers(context.Context, *empty.Empty) (*Users, error)
	UpdateUser(context.Context, *User) (*User, error)
	DeleteUser(context.Context, *UserLookup) (*empty.Empty, error)
	mustEmbedUnimplementedAuth_V1Server()
}

// UnimplementedAuth_V1Server must be embedded to have forward compatible implementations.
type UnimplementedAuth_V1Server struct {
}

func (UnimplementedAuth_V1Server) CreateUser(context.Context, *NewUser) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAuth_V1Server) GetUser(context.Context, *UserLookup) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAuth_V1Server) GetAllUsers(context.Context, *empty.Empty) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUsers not implemented")
}
func (UnimplementedAuth_V1Server) UpdateUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAuth_V1Server) DeleteUser(context.Context, *UserLookup) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAuth_V1Server) mustEmbedUnimplementedAuth_V1Server() {}

// UnsafeAuth_V1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Auth_V1Server will
// result in compilation errors.
type UnsafeAuth_V1Server interface {
	mustEmbedUnimplementedAuth_V1Server()
}

func RegisterAuth_V1Server(s grpc.ServiceRegistrar, srv Auth_V1Server) {
	s.RegisterService(&Auth_V1_ServiceDesc, srv)
}

func _Auth_V1_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Auth_V1Server).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_v1.Auth_V1/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Auth_V1Server).CreateUser(ctx, req.(*NewUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_V1_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLookup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Auth_V1Server).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_v1.Auth_V1/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Auth_V1Server).GetUser(ctx, req.(*UserLookup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_V1_GetAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Auth_V1Server).GetAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_v1.Auth_V1/GetAllUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Auth_V1Server).GetAllUsers(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_V1_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Auth_V1Server).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_v1.Auth_V1/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Auth_V1Server).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_V1_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLookup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Auth_V1Server).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_v1.Auth_V1/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Auth_V1Server).DeleteUser(ctx, req.(*UserLookup))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_V1_ServiceDesc is the grpc.ServiceDesc for Auth_V1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_V1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth_v1.Auth_V1",
	HandlerType: (*Auth_V1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Auth_V1_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Auth_V1_GetUser_Handler,
		},
		{
			MethodName: "GetAllUsers",
			Handler:    _Auth_V1_GetAllUsers_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Auth_V1_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Auth_V1_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auth_v1/auth_v1.proto",
}
